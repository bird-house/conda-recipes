package:
  name: celery
  version: "3.1.19"

source:
  fn: celery-3.1.19.tar.gz
  url: https://pypi.python.org/packages/source/c/celery/celery-3.1.19.tar.gz
  md5: fba8c4b269814dc6dbc36abb0e66c384
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - celery = celery:main
    #
    # Would create an entry point called celery that calls celery.main()

    - celery = celery.__main__:main
    - celeryd = celery.__main__:_compat_worker
    - celerybeat = celery.__main__:_compat_beat
    - celeryd-multi = celery.__main__:_compat_multi

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - pytz
    - billiard >=3.3.0.20,<3.4
    - kombu >=3.0.25,<3.1

  run:
    - python
    - pytz
    - billiard >=3.3.0.20,<3.4
    - kombu >=3.0.25,<3.1

test:
  # Python imports
  imports:
    - celery
    - celery.app
    - celery.apps
    - celery.backends
    - celery.bin
    - celery.concurrency
    - celery.contrib
    - celery.events
    - celery.fixups
    - celery.loaders
    - celery.security
    - celery.task
    - celery.utils
    - celery.utils.dispatch
    - celery.worker

#  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    #- celery --help
    #- celeryd --help
    #- celerybeat --help
    #- celeryd-multi --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://celeryproject.org
  license: BSD License
  summary: 'Distributed Task Queue'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
